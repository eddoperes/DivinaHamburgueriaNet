// <auto-generated />
using System;
using DivinaHamburgueria.Infra.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DivinaHamburgueria.Infra.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221013184935_CorrigeItemDoEstoqueCampoMarca")]
    partial class CorrigeItemDoEstoqueCampoMarca
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DivinaHamburgueria.Domain.Entities.Alarme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ComestivelId")
                        .HasColumnType("int");

                    b.Property<int>("QuantidadeMinima")
                        .HasColumnType("int");

                    b.Property<int?>("UnidadeId")
                        .HasColumnType("int");

                    b.Property<int>("ValidadeEmDias")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ComestivelId");

                    b.HasIndex("UnidadeId");

                    b.ToTable("Alarmes", (string)null);
                });

            modelBuilder.Entity("DivinaHamburgueria.Domain.Entities.Cardapio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DataAtivado")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataCriado")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataInativado")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Estado")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Cardapios", (string)null);
                });

            modelBuilder.Entity("DivinaHamburgueria.Domain.Entities.CardapioItemDoCardapio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CardapioId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataAtivado")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataCriado")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataInativado")
                        .HasColumnType("datetime2");

                    b.Property<int>("Estado")
                        .HasColumnType("int");

                    b.Property<int?>("ItemDoCardapioId")
                        .HasColumnType("int");

                    b.Property<decimal>("Preco")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("CardapioId");

                    b.HasIndex("ItemDoCardapioId");

                    b.ToTable("CardapiosItensDoCardapio");
                });

            modelBuilder.Entity("DivinaHamburgueria.Domain.Entities.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<DateTime>("DataCriado")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Clientes", (string)null);
                });

            modelBuilder.Entity("DivinaHamburgueria.Domain.Entities.Comestivel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Comestiveis", (string)null);
                });

            modelBuilder.Entity("DivinaHamburgueria.Domain.Entities.Estoque", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ItemDoEstoqueId")
                        .HasColumnType("int");

                    b.Property<float>("Quantidade")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("ItemDoEstoqueId");

                    b.ToTable("Estoques", (string)null);
                });

            modelBuilder.Entity("DivinaHamburgueria.Domain.Entities.Fornecedor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<DateTime>("DataCriado")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Fornecedores", (string)null);
                });

            modelBuilder.Entity("DivinaHamburgueria.Domain.Entities.Ingrediente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ComestivelId")
                        .HasColumnType("int");

                    b.Property<int?>("ItemDoCardapioReceitaId")
                        .HasColumnType("int");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.Property<int?>("UnidadeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ComestivelId");

                    b.HasIndex("ItemDoCardapioReceitaId");

                    b.HasIndex("UnidadeId");

                    b.ToTable("Ingredientes", (string)null);
                });

            modelBuilder.Entity("DivinaHamburgueria.Domain.Entities.ItemDoCardapio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fotografia")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ItensDoCardapio", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("ItemDoCardapio");
                });

            modelBuilder.Entity("DivinaHamburgueria.Domain.Entities.ItemDoEstoque", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Conteudo")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Marca")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UnidadeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UnidadeId");

                    b.ToTable("ItensDoEstoque", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("ItemDoEstoque");
                });

            modelBuilder.Entity("DivinaHamburgueria.Domain.Entities.Pedido", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ClienteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataCriado")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observacao")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Pedidos", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("Pedido");
                });

            modelBuilder.Entity("DivinaHamburgueria.Domain.Entities.PedidoDeCompra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DataCancelado")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataCotacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataCriado")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataEmitido")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataEntregue")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataEstocado")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataPagamento")
                        .HasColumnType("datetime2");

                    b.Property<int>("Estado")
                        .HasColumnType("int");

                    b.Property<int>("EstadoPagamento")
                        .HasColumnType("int");

                    b.Property<int?>("FornecedorId")
                        .HasColumnType("int");

                    b.Property<string>("Observacao")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("FornecedorId");

                    b.ToTable("PedidosDeCompra", (string)null);
                });

            modelBuilder.Entity("DivinaHamburgueria.Domain.Entities.PedidoDeCompraItemDoEstoque", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Estocado")
                        .HasColumnType("bit");

                    b.Property<int?>("ItemDoEstoqueId")
                        .HasColumnType("int");

                    b.Property<int?>("PedidoDeCompraId")
                        .HasColumnType("int");

                    b.Property<decimal>("PrecoTotal")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("PrecoUnitario")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemDoEstoqueId");

                    b.HasIndex("PedidoDeCompraId");

                    b.ToTable("PedidosDeCompraItensDoEstoque", (string)null);
                });

            modelBuilder.Entity("DivinaHamburgueria.Domain.Entities.PedidoDeliveryItemDoCardapio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ItemDoCardapioId")
                        .HasColumnType("int");

                    b.Property<string>("Observacao")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("PedidoDeliveryId")
                        .HasColumnType("int");

                    b.Property<decimal>("Preco")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("ItemDoCardapioId");

                    b.HasIndex("PedidoDeliveryId");

                    b.ToTable("PedidosDeliveryItensDoCardapio", (string)null);
                });

            modelBuilder.Entity("DivinaHamburgueria.Domain.Entities.PedidoSalaoItemDoCardapio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ItemDoCardapioId")
                        .HasColumnType("int");

                    b.Property<string>("Observacao")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("PedidoSalaoId")
                        .HasColumnType("int");

                    b.Property<decimal>("Preco")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("ItemDoCardapioId");

                    b.HasIndex("PedidoSalaoId");

                    b.ToTable("PedidosSalaoItensDoCardapio", (string)null);
                });

            modelBuilder.Entity("DivinaHamburgueria.Domain.Entities.Unidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Unidades", (string)null);
                });

            modelBuilder.Entity("DivinaHamburgueria.Domain.Entities.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DataAtivado")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataCriado")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataInativado")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Usuarios", (string)null);
                });

            modelBuilder.Entity("DivinaHamburgueria.Domain.ValueObjects.Endereco", b =>
                {
                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CEP")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Complemento")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Numero")
                        .HasColumnType("int");

                    b.Property<string>("UF")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.ToTable("Enderecos", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("Endereco");
                });

            modelBuilder.Entity("DivinaHamburgueria.Domain.ValueObjects.Telefone", b =>
                {
                    b.Property<string>("DDD")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.ToTable("Telefones", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("Telefone");
                });

            modelBuilder.Entity("DivinaHamburgueria.Infra.Data.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DivinaHamburgueria.Domain.Entities.ItemDoCardapioReceita", b =>
                {
                    b.HasBaseType("DivinaHamburgueria.Domain.Entities.ItemDoCardapio");

                    b.HasDiscriminator().HasValue("ItemDoCardapioReceita");
                });

            modelBuilder.Entity("DivinaHamburgueria.Domain.Entities.ItemDoCardapioRevenda", b =>
                {
                    b.HasBaseType("DivinaHamburgueria.Domain.Entities.ItemDoCardapio");

                    b.Property<int?>("ItemDoEstoqueId")
                        .HasColumnType("int");

                    b.HasIndex("ItemDoEstoqueId");

                    b.HasDiscriminator().HasValue("ItemDoCardapioRevenda");
                });

            modelBuilder.Entity("DivinaHamburgueria.Domain.Entities.ItemDoEstoqueReceita", b =>
                {
                    b.HasBaseType("DivinaHamburgueria.Domain.Entities.ItemDoEstoque");

                    b.Property<int>("ComestivelId")
                        .HasColumnType("int");

                    b.HasIndex("ComestivelId");

                    b.HasDiscriminator().HasValue("ItemDoEstoqueReceita");
                });

            modelBuilder.Entity("DivinaHamburgueria.Domain.Entities.ItemDoEstoqueRevenda", b =>
                {
                    b.HasBaseType("DivinaHamburgueria.Domain.Entities.ItemDoEstoque");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasDiscriminator().HasValue("ItemDoEstoqueRevenda");
                });

            modelBuilder.Entity("DivinaHamburgueria.Domain.Entities.PedidoDelivery", b =>
                {
                    b.HasBaseType("DivinaHamburgueria.Domain.Entities.Pedido");

                    b.Property<DateTime>("DataCancelado")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataEmbalado")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataEmitido")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataEntregue")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataPagamento")
                        .HasColumnType("datetime2");

                    b.Property<int>("Pagamento")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("PedidoDelivery");
                });

            modelBuilder.Entity("DivinaHamburgueria.Domain.Entities.PedidoSalao", b =>
                {
                    b.HasBaseType("DivinaHamburgueria.Domain.Entities.Pedido");

                    b.Property<DateTime>("DataCancelado")
                        .HasColumnType("datetime2")
                        .HasColumnName("PedidoSalao_DataCancelado");

                    b.Property<DateTime>("DataEmitido")
                        .HasColumnType("datetime2")
                        .HasColumnName("PedidoSalao_DataEmitido");

                    b.Property<DateTime>("DataEntregue")
                        .HasColumnType("datetime2")
                        .HasColumnName("PedidoSalao_DataEntregue");

                    b.Property<int>("Estado")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("PedidoSalao");
                });

            modelBuilder.Entity("DivinaHamburgueria.Domain.ValueObjects.EnderecoCliente", b =>
                {
                    b.HasBaseType("DivinaHamburgueria.Domain.ValueObjects.Endereco");

                    b.Property<int?>("ClienteId")
                        .HasColumnType("int");

                    b.HasIndex("ClienteId");

                    b.HasDiscriminator().HasValue("EnderecoCliente");
                });

            modelBuilder.Entity("DivinaHamburgueria.Domain.ValueObjects.EnderecoFornecedor", b =>
                {
                    b.HasBaseType("DivinaHamburgueria.Domain.ValueObjects.Endereco");

                    b.Property<int?>("FornecedorId")
                        .HasColumnType("int");

                    b.HasIndex("FornecedorId");

                    b.HasDiscriminator().HasValue("EnderecoFornecedor");
                });

            modelBuilder.Entity("DivinaHamburgueria.Domain.ValueObjects.TelefoneCliente", b =>
                {
                    b.HasBaseType("DivinaHamburgueria.Domain.ValueObjects.Telefone");

                    b.Property<int?>("ClienteId")
                        .HasColumnType("int");

                    b.HasIndex("ClienteId");

                    b.HasDiscriminator().HasValue("TelefoneCliente");
                });

            modelBuilder.Entity("DivinaHamburgueria.Domain.ValueObjects.TelefoneFornecedor", b =>
                {
                    b.HasBaseType("DivinaHamburgueria.Domain.ValueObjects.Telefone");

                    b.Property<int?>("FornecedorId")
                        .HasColumnType("int");

                    b.HasIndex("FornecedorId");

                    b.HasDiscriminator().HasValue("TelefoneFornecedor");
                });

            modelBuilder.Entity("DivinaHamburgueria.Domain.Entities.Alarme", b =>
                {
                    b.HasOne("DivinaHamburgueria.Domain.Entities.Comestivel", "Comestivel")
                        .WithMany()
                        .HasForeignKey("ComestivelId");

                    b.HasOne("DivinaHamburgueria.Domain.Entities.Unidade", "Unidade")
                        .WithMany()
                        .HasForeignKey("UnidadeId");

                    b.Navigation("Comestivel");

                    b.Navigation("Unidade");
                });

            modelBuilder.Entity("DivinaHamburgueria.Domain.Entities.CardapioItemDoCardapio", b =>
                {
                    b.HasOne("DivinaHamburgueria.Domain.Entities.Cardapio", "Cardapio")
                        .WithMany("CardapiosItensDoCardapio")
                        .HasForeignKey("CardapioId");

                    b.HasOne("DivinaHamburgueria.Domain.Entities.ItemDoCardapio", "ItemDoCardapio")
                        .WithMany()
                        .HasForeignKey("ItemDoCardapioId");

                    b.Navigation("Cardapio");

                    b.Navigation("ItemDoCardapio");
                });

            modelBuilder.Entity("DivinaHamburgueria.Domain.Entities.Estoque", b =>
                {
                    b.HasOne("DivinaHamburgueria.Domain.Entities.ItemDoEstoque", "ItemDoEstoque")
                        .WithMany()
                        .HasForeignKey("ItemDoEstoqueId");

                    b.Navigation("ItemDoEstoque");
                });

            modelBuilder.Entity("DivinaHamburgueria.Domain.Entities.Ingrediente", b =>
                {
                    b.HasOne("DivinaHamburgueria.Domain.Entities.Comestivel", "Comestivel")
                        .WithMany()
                        .HasForeignKey("ComestivelId");

                    b.HasOne("DivinaHamburgueria.Domain.Entities.ItemDoCardapioReceita", null)
                        .WithMany("Ingredientes")
                        .HasForeignKey("ItemDoCardapioReceitaId");

                    b.HasOne("DivinaHamburgueria.Domain.Entities.Unidade", "Unidade")
                        .WithMany()
                        .HasForeignKey("UnidadeId");

                    b.Navigation("Comestivel");

                    b.Navigation("Unidade");
                });

            modelBuilder.Entity("DivinaHamburgueria.Domain.Entities.ItemDoEstoque", b =>
                {
                    b.HasOne("DivinaHamburgueria.Domain.Entities.Unidade", "Unidade")
                        .WithMany()
                        .HasForeignKey("UnidadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Unidade");
                });

            modelBuilder.Entity("DivinaHamburgueria.Domain.Entities.Pedido", b =>
                {
                    b.HasOne("DivinaHamburgueria.Domain.Entities.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId");

                    b.HasOne("DivinaHamburgueria.Domain.Entities.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Cliente");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("DivinaHamburgueria.Domain.Entities.PedidoDeCompra", b =>
                {
                    b.HasOne("DivinaHamburgueria.Domain.Entities.Fornecedor", "Fornecedor")
                        .WithMany()
                        .HasForeignKey("FornecedorId");

                    b.Navigation("Fornecedor");
                });

            modelBuilder.Entity("DivinaHamburgueria.Domain.Entities.PedidoDeCompraItemDoEstoque", b =>
                {
                    b.HasOne("DivinaHamburgueria.Domain.Entities.ItemDoEstoque", "ItemDoEstoque")
                        .WithMany()
                        .HasForeignKey("ItemDoEstoqueId");

                    b.HasOne("DivinaHamburgueria.Domain.Entities.PedidoDeCompra", "PedidoDeCompra")
                        .WithMany()
                        .HasForeignKey("PedidoDeCompraId");

                    b.Navigation("ItemDoEstoque");

                    b.Navigation("PedidoDeCompra");
                });

            modelBuilder.Entity("DivinaHamburgueria.Domain.Entities.PedidoDeliveryItemDoCardapio", b =>
                {
                    b.HasOne("DivinaHamburgueria.Domain.Entities.ItemDoCardapio", "ItemDoCardapio")
                        .WithMany()
                        .HasForeignKey("ItemDoCardapioId");

                    b.HasOne("DivinaHamburgueria.Domain.Entities.PedidoDelivery", "PedidoDelivery")
                        .WithMany()
                        .HasForeignKey("PedidoDeliveryId");

                    b.Navigation("ItemDoCardapio");

                    b.Navigation("PedidoDelivery");
                });

            modelBuilder.Entity("DivinaHamburgueria.Domain.Entities.PedidoSalaoItemDoCardapio", b =>
                {
                    b.HasOne("DivinaHamburgueria.Domain.Entities.ItemDoCardapio", "ItemDoCardapio")
                        .WithMany()
                        .HasForeignKey("ItemDoCardapioId");

                    b.HasOne("DivinaHamburgueria.Domain.Entities.PedidoSalao", "PedidoSalao")
                        .WithMany()
                        .HasForeignKey("PedidoSalaoId");

                    b.Navigation("ItemDoCardapio");

                    b.Navigation("PedidoSalao");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DivinaHamburgueria.Infra.Data.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DivinaHamburgueria.Infra.Data.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DivinaHamburgueria.Infra.Data.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DivinaHamburgueria.Infra.Data.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DivinaHamburgueria.Domain.Entities.ItemDoCardapioRevenda", b =>
                {
                    b.HasOne("DivinaHamburgueria.Domain.Entities.ItemDoEstoque", "ItemDoEstoque")
                        .WithMany()
                        .HasForeignKey("ItemDoEstoqueId");

                    b.Navigation("ItemDoEstoque");
                });

            modelBuilder.Entity("DivinaHamburgueria.Domain.Entities.ItemDoEstoqueReceita", b =>
                {
                    b.HasOne("DivinaHamburgueria.Domain.Entities.Comestivel", "Comestivel")
                        .WithMany()
                        .HasForeignKey("ComestivelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comestivel");
                });

            modelBuilder.Entity("DivinaHamburgueria.Domain.ValueObjects.EnderecoCliente", b =>
                {
                    b.HasOne("DivinaHamburgueria.Domain.Entities.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId");

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("DivinaHamburgueria.Domain.ValueObjects.EnderecoFornecedor", b =>
                {
                    b.HasOne("DivinaHamburgueria.Domain.Entities.Fornecedor", "Fornecedor")
                        .WithMany()
                        .HasForeignKey("FornecedorId");

                    b.Navigation("Fornecedor");
                });

            modelBuilder.Entity("DivinaHamburgueria.Domain.ValueObjects.TelefoneCliente", b =>
                {
                    b.HasOne("DivinaHamburgueria.Domain.Entities.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId");

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("DivinaHamburgueria.Domain.ValueObjects.TelefoneFornecedor", b =>
                {
                    b.HasOne("DivinaHamburgueria.Domain.Entities.Fornecedor", "Fornecedor")
                        .WithMany()
                        .HasForeignKey("FornecedorId");

                    b.Navigation("Fornecedor");
                });

            modelBuilder.Entity("DivinaHamburgueria.Domain.Entities.Cardapio", b =>
                {
                    b.Navigation("CardapiosItensDoCardapio");
                });

            modelBuilder.Entity("DivinaHamburgueria.Domain.Entities.ItemDoCardapioReceita", b =>
                {
                    b.Navigation("Ingredientes");
                });
#pragma warning restore 612, 618
        }
    }
}
